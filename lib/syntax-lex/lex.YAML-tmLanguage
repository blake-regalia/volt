# [PackageDev] target_format: plist, ext: tmLanguage
name: Lex/Flex
scopeName: source.lex
fileTypes: [l]
uuid: 92E842A0-9DE6-4D31-A6AC-1CDE0F9547C5

patterns:
- comment: first section of the file - definitions
  name: meta.section.definitions.lex
  begin: \A(?!%%$)
  end: ^(?=%%$)
  patterns:
  - include: '#includes'
  - name: comment.block.c.lex
    begin: /\*
    end: \*/|$
  - name: meta.definition.lex
    begin: ^(?i)([a-z_][a-z0-9_-]*)(?=\s|$)
    beginCaptures:
      '1': {name: entity.name.function.lex}
    end: $
    patterns:
    - include: '#regexp'
  - name: meta.start-condition.lex
    begin: ^(%[sx])(?=\s|$)
    beginCaptures:
      '1': {name: punctuation.definition.start-condition.lex}
    end: $
    patterns:
    - match: (?i)[a-z_][a-z0-9_-]*
    - name: invalid.illegal.lex
      match: \S
  - name: meta.options.lex
    begin: ^(%option)\s(?=\S)
    beginCaptures:
      '1': {name: keyword.other.option.lex}
    end: $
    patterns:
    - name: support.other.option.lex
      match: \b(?:(?:no)?(?:[78]bit|align|backup|batch|c\+\+|debug|default|ecs|fast|full|interactive|lex-compat|meta-ecs|perf-report|read|stdout|verbose|warn|array|pointer|input|unput|yy_(?:(?:push|pop|top)_state|scan_(?:buffer|bytes|string))|main|stack|stdinit|yylineno|yywrap)|(?:case(?:ful|less)|case-(?:in)?sensitive|(?:always|never)-interactive))\b
  - name: keyword.other.option.lex
    begin: ^%(?:array|pointer)
    end: $
    patterns:
    - name: invalid.illegal.lex
      match: \S

- begin: ^(%%)$
  beginCaptures:
    '1': {name: punctuation.separator.sections.lex}
  end: \Z.\A(?# never end)
  patterns:
  - comment: second section of the file - rules
    name: meta.section.rules.lex
    begin: ^(?!%%$)
    end: ^(?=%%$)
    patterns:
    - name: meta.rule.lex
      begin: ^(?!$)
      end: $
      patterns:
      - include: '#includes'
      - comment: rule pattern
        begin: (?i)^(<(?:(?:[a-z_][a-z0-9_-]*,)*[a-z_][a-z0-9_-]|\*)>)?(?:(<<EOF>>)(\s*))?(?=\S)
        beginCaptures:
          '1': {name: keyword.other.start-condition.lex}
          '2': {name: keyword.operator.eof.lex}
          '3': {name: invalid.illegal.regexp.lex}
        end: (?=\s)|$
        patterns:
        - include: '#regexp'
      - comment: 'TODO: %} should override embedded scopes'
        begin: (%\{)
        beginCaptures:
          '1': {name: punctuation.definition.code.lex}
        end: (%\})(.*)
        endCaptures:
          '1': {name: punctuation.terminator.code.lex}
          '2': {name: invalid.illegal.ignored.lex}
        patterns:
        - include: '#csource'
      - comment: 'TODO: eol should override embedded scopes'
        name: meta.rule.action.lex
        begin: (?=\S)
        end: $
        patterns:
        - include: '#csource'
  - comment: third section of the file - user code
    contentName: meta.section.user-code.lex
    begin: ^(%%)$
    beginCaptures:
      '1': {name: punctuation.separator.sections.lex}
    end: \Z.\A(?# never end)
    patterns:
    - include: '#csource'

repository:
  csource:
    patterns:
    - name: support.function.c.lex
      match: \b(?:ECHO|BEGIN|REJECT|YY_FLUSH_BUFFER|YY_BREAK|yy(?:more|less|unput|input|terminate|text|leng|restart|_(?:push|pop|top)_state|_(?:create|switch_to|flush|delete)_buffer|_scan_(?:string|bytes|buffer)|_set_(?:bol|interactive))(?=\(|$))\b
    - include: source.c

  includes:
    patterns:
    - comment: 'TODO: $} should override the embedded scopes'
      name: meta.embedded.source.c.lex
      begin: ^%\{$
      end: ^%\}$
      patterns:
      - include: source.c
    - comment: 'TODO: eol should override the embedded scopes'
      name: meta.embedded.source.c.lex
      begin: ^[ \t]+
      end: $
      patterns:
      - include: source.c
    - begin: (\/\*)
      end: (\*\/)
      name: comment.block.documentation.lex

  re_escape:
    name: constant.character.escape.lex
    match: \\(?i:[0-9]{1,3}|x[0-9a-f]{1,2}|.)

  rec_csource:
    begin: \{
    end: \}
    patterns:
    - include: source.c
    - include: '#csource'

  regexp:
    name: string.regexp.lex
    begin: \G(?=\S)(\^)?
    end: (\$)?(?:(?=\s)|$)
    captures:
      '1': {name: keyword.control.anchor.regexp.lex}
    patterns:
    - include: '#subregexp'

  subregexp:
    patterns:
    - include: '#re_escape'
    - name: constant.other.character-class.set.lex
      begin: (\[)(\^)?-?
      beginCaptures:
        '1': {name: punctuation.definition.character-class.set.lex}
        '2': {name: keyword.operator.negation.regexp.lex}
      end: -?(\])
      endCaptures:
        '1': {name: punctuation.terminator.character-class.set.lex}
      patterns:
      - include: '#re_escape'
      - name: constant.other.character-class.set.lex
        match: \[:(?:(?:alnum|alpha|blank|cntrl|x?digit|graph|lower|print|punct|space|upper)|(.*?)):\]
        captures:
          '1': {name: invalid.illegal.regexp.lex}
    - name: variable.other.lex
      match: (?i){[a-z_][a-z0-9_-]*}
    - name: keyword.operator.quantifier.regexp.lex
      begin: \{
      end: \}
      patterns:
      - match: (?<=\{)[0-9]*(?:,[0-9]*)?(?=\})
      - comment: '{3} counts should only have digit[,digit]'
        name: invalid.illegal.regexp.lex
        match: '[^}]'
    - name: string.quoted.double.regexp.lex
      begin: '"'
      end: '"'
      patterns:
      - include: '#re_escape'
    - comment: make ** or +? or other combinations illegal
      begin: ([*+?])(?=[*+?])
      beginCaptures:
        '1': {name: keyword.operator.quantifier.regexp.lex}
      end: (?=[^*+?])
      patterns:
      - name: invalid.illegal.regexp.lex
        match: .
    - name: keyword.operator.quantifier.regexp.lex
      match: '[*+?]'
    - comment: <<EOF>> is handled in the rule pattern
      name: invalid.illegal.regexp.lex
      match: <<EOF>>
    - name: meta.group.regexp.lex
      begin: (\()
      beginCaptures:
        '1': {name: punctuation.definition.group.regexp.lex}
      end: (\))|(?=\s)|$(?#end on whitespace because regex does)
      endCaptures:
        '1': {name: punctuation.terminator.group.regexp.lex}
      patterns:
      - name: invalid.illegal.regexp.lex
        match: /
      - include: '#subregexp'
    - comment: detection of multiple trailing contexts
      begin: (/)
      beginCaptures:
        '1': {name: keyword.operator.trailing-match.regexp.lex}
      end: (?=\s)|$
      patterns:
      - name: invalid.illegal.regexp.lex
        match: /|\$(?!\S)
      - include: '#subregexp'
keyEquivalent: ^~L
